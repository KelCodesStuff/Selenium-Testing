# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/configuration-reference
version: 2.1

# Define an executor for running jobs in a Docker container.
# The executor defines the environment in which the job runs.
executors:
  python-executor:
    # Use an official Python Docker image with version 3.9.
    # See: https://circleci.com/docs/2.0/circleci-images/
    docker:
      - image: circleci/python:3.9  # Specify Python version
    # Set the working directory where all the steps will run.
    working_directory: ~/repo

# Define jobs that execute commands in the environment defined by the executor.
# See: https://circleci.com/docs/jobs-steps/#jobs-overview
jobs:
  test:
    executor: python-executor  # Use the defined python-executor
    steps:
      # Step 1: Check out the project code from the repository.
      - checkout

      # Step 2: Update the system package list and install necessary packages.
      - run:
          name: Install Dependencies
          command: |
            sudo apt-get update
            # Install Chromium browser and Chromedriver for Selenium tests.
            sudo apt-get install -y chromium-browser chromium-chromedriver
            # Install Selenium and PyTest for running browser automation tests.
            pip install selenium pytest

      # Step 3: Set up Chromedriver path and update environment variables.
      - run:
          name: Set CHROMEDRIVER Path
          command: |
            export CHROMEDRIVER_PATH=/usr/lib/chromium-browser/chromedriver
            export PATH=$PATH:/usr/lib/chromium-browser/

      # Step 4: Install project-specific dependencies from the requirements.txt file.
      - run:
          name: Install Python Dependencies
          command: |
            pip install -r requirements.txt

      # Step 5: Run the Selenium and PyTest tests.
      - run:
          name: Run Tests
          # Pytest options to stop on the first failure, suppress warnings, and produce a JUnit-style XML report.
          command: pytest --maxfail=1 --disable-warnings -v --junitxml=reports/results.xml

      # Step 6: Store the test results in the reports folder for review.
      - store_test_results:
          path: reports  # Save test results in the reports directory

      # Step 7: Store the generated artifacts (e.g., test reports) for later review.
      - store_artifacts:
          path: reports  # Save test artifacts for later reference

# Define workflows to orchestrate jobs.
# See: https://circleci.com/docs/workflows/
workflows:
  version: 2  # Specify the version of the workflow configuration
  test_workflow:
    # This is where you define the order of jobs to run.
    jobs:
      - test  # Run the 'test' job as part of this workflow
